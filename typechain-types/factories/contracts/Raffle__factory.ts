/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETHEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpKeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b506040516200181a3803806200181a8339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c61014051611433620003e7600039600081816107990152610842015260006106550152600061063201526000610611015260006105d50152600081816102b401526103b10152600081816102f1015261034501526114336000f3fe6080604052600436106100a75760003560e01c806353a2c19a1161006457806353a2c19a146101895780636e04ff0d146101b457806391ad27b4146101f2578063e55ae4e81461021d578063f43b52cb1461025a578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b5780634585e33b14610135578063473f1ddc1461015e575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610bb4565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610c46565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610dfa565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061015c60048036038101906101579190610eb1565b61051e565b005b34801561016a57600080fd5b5061017361071d565b6040516101809190610f3f565b60405180910390f35b34801561019557600080fd5b5061019e610747565b6040516101ab9190610bb4565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d6919061100f565b610756565b6040516101e99291906110fb565b60405180910390f35b3480156101fe57600080fd5b5061020761083e565b6040516102149190610bb4565b60405180910390f35b34801561022957600080fd5b50610244600480360381019061023f919061112b565b610866565b6040516102519190610f3f565b60405180910390f35b34801561026657600080fd5b5061026f6108ad565b60405161027c9190610bb4565b60405180910390f35b34801561029157600080fd5b5061029a6108b7565b6040516102a79190610bb4565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610398929190611158565b60405180910390fd5b6103ab82826108c3565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c610bcf565b5b600160149054906101000a900460ff16600181111561043f5761043e610bcf565b5b14610476576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061053860405180602001604052806000815250610756565b509050806105a75747600080549050600160149054906101000a900460ff16600181111561056957610568610bcf565b5b6040517f3a8d608600000000000000000000000000000000000000000000000000000000815260040161059e93929190611181565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105cc576105cb610bcf565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610696959493929190611230565b602060405180830381600087803b1580156106b057600080fd5b505af11580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190611298565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff16600181111561077e5761077d610bcf565b5b6000600181111561079257610791610bcf565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107c691906112f4565b119050600080600080549050119050600080471190508380156107e65750825b80156107ef5750815b80156107f85750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080828154811061087b5761087a611328565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b60008080549050826000815181106108de576108dd611328565b5b60200260200101516108f09190611386565b9050600080828154811061090757610906611328565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561099b5761099a610bcf565b5b021790555042600281905550600067ffffffffffffffff8111156109c2576109c1610cb7565b5b6040519080825280602002602001820160405280156109f05781602001602082028036833780820191505090505b5060009080519060200190610a06929190610af4565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a2d906113e8565b60006040518083038185875af1925050503d8060008114610a6a576040519150601f19603f3d011682016040523d82523d6000602084013e610a6f565b606091505b5050905080610aaa576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b6d579160200282015b82811115610b6c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b14565b5b509050610b7a9190610b7e565b5090565b5b80821115610b97576000816000905550600101610b7f565b5090565b6000819050919050565b610bae81610b9b565b82525050565b6000602082019050610bc96000830184610ba5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c0f57610c0e610bcf565b5b50565b6000819050610c2082610bfe565b919050565b6000610c3082610c12565b9050919050565b610c4081610c25565b82525050565b6000602082019050610c5b6000830184610c37565b92915050565b6000604051905090565b600080fd5b600080fd5b610c7e81610b9b565b8114610c8957600080fd5b50565b600081359050610c9b81610c75565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cef82610ca6565b810181811067ffffffffffffffff82111715610d0e57610d0d610cb7565b5b80604052505050565b6000610d21610c61565b9050610d2d8282610ce6565b919050565b600067ffffffffffffffff821115610d4d57610d4c610cb7565b5b602082029050602081019050919050565b600080fd5b6000610d76610d7184610d32565b610d17565b90508083825260208201905060208402830185811115610d9957610d98610d5e565b5b835b81811015610dc25780610dae8882610c8c565b845260208401935050602081019050610d9b565b5050509392505050565b600082601f830112610de157610de0610ca1565b5b8135610df1848260208601610d63565b91505092915050565b60008060408385031215610e1157610e10610c6b565b5b6000610e1f85828601610c8c565b925050602083013567ffffffffffffffff811115610e4057610e3f610c70565b5b610e4c85828601610dcc565b9150509250929050565b600080fd5b60008083601f840112610e7157610e70610ca1565b5b8235905067ffffffffffffffff811115610e8e57610e8d610e56565b5b602083019150836001820283011115610eaa57610ea9610d5e565b5b9250929050565b60008060208385031215610ec857610ec7610c6b565b5b600083013567ffffffffffffffff811115610ee657610ee5610c70565b5b610ef285828601610e5b565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f2982610efe565b9050919050565b610f3981610f1e565b82525050565b6000602082019050610f546000830184610f30565b92915050565b600080fd5b600067ffffffffffffffff821115610f7a57610f79610cb7565b5b610f8382610ca6565b9050602081019050919050565b82818337600083830152505050565b6000610fb2610fad84610f5f565b610d17565b905082815260208101848484011115610fce57610fcd610f5a565b5b610fd9848285610f90565b509392505050565b600082601f830112610ff657610ff5610ca1565b5b8135611006848260208601610f9f565b91505092915050565b60006020828403121561102557611024610c6b565b5b600082013567ffffffffffffffff81111561104357611042610c70565b5b61104f84828501610fe1565b91505092915050565b60008115159050919050565b61106d81611058565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110ad578082015181840152602081019050611092565b838111156110bc576000848401525b50505050565b60006110cd82611073565b6110d7818561107e565b93506110e781856020860161108f565b6110f081610ca6565b840191505092915050565b60006040820190506111106000830185611064565b818103602083015261112281846110c2565b90509392505050565b60006020828403121561114157611140610c6b565b5b600061114f84828501610c8c565b91505092915050565b600060408201905061116d6000830185610f30565b61117a6020830184610f30565b9392505050565b60006060820190506111966000830186610ba5565b6111a36020830185610ba5565b6111b06040830184610ba5565b949350505050565b6000819050919050565b6111cb816111b8565b82525050565b600067ffffffffffffffff82169050919050565b6111ee816111d1565b82525050565b600061ffff82169050919050565b61120b816111f4565b82525050565b600063ffffffff82169050919050565b61122a81611211565b82525050565b600060a08201905061124560008301886111c2565b61125260208301876111e5565b61125f6040830186611202565b61126c6060830185611221565b6112796080830184611221565b9695505050505050565b60008151905061129281610c75565b92915050565b6000602082840312156112ae576112ad610c6b565b5b60006112bc84828501611283565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ff82610b9b565b915061130a83610b9b565b92508282101561131d5761131c6112c5565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061139182610b9b565b915061139c83610b9b565b9250826113ac576113ab611357565b5b828206905092915050565b600081905092915050565b50565b60006113d26000836113b7565b91506113dd826113c2565b600082019050919050565b60006113f3826113c5565b915081905091905056fea26469706673582212201cdc10c8283fe2e79c0b9b04dcb990693e126dda435c911428a2857572f2bd4e64736f6c63430008080033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
