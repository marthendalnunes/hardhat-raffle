/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETHEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpKeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b506040516200176b3803806200176b8339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c6101405161138b620003e06000396000610720015260006105dc015260006105b9015260006105980152600061055c01526000818161027e015261037b0152600081816102bb015261030f015261138b6000f3fe60806040526004361061009c5760003560e01c8063473f1ddc11610064578063473f1ddc1461015357806353a2c19a1461017e5780636e04ff0d146101a9578063e55ae4e8146101e7578063f43b52cb14610224578063fd6673f51461024f5761009c565b806309bc33a7146100a1578063115cbaf5146100cc5780631fe543e3146100f75780632cfcc539146101205780634585e33b1461012a575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190610b0c565b60405180910390f35b3480156100d857600080fd5b506100e16102a2565b6040516100ee9190610b9e565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610d52565b6102b9565b005b610128610379565b005b34801561013657600080fd5b50610151600480360381019061014c9190610e09565b6104a5565b005b34801561015f57600080fd5b506101686106a4565b6040516101759190610e97565b60405180910390f35b34801561018a57600080fd5b506101936106ce565b6040516101a09190610b0c565b60405180910390f35b3480156101b557600080fd5b506101d060048036038101906101cb9190610f67565b6106dd565b6040516101de929190611053565b60405180910390f35b3480156101f357600080fd5b5061020e60048036038101906102099190611083565b6107c5565b60405161021b9190610e97565b60405180910390f35b34801561023057600080fd5b5061023961080c565b6040516102469190610b0c565b60405180910390f35b34801561025b57600080fd5b50610264610816565b6040516102719190610b0c565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103629291906110b0565b60405180910390fd5b6103758282610822565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103d3576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156103e7576103e6610b27565b5b600160149054906101000a900460ff16600181111561040957610408610b27565b5b14610440576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006104bf604051806020016040528060008152506106dd565b5090508061052e5747600080549050600160149054906101000a900460ff1660018111156104f0576104ef610b27565b5b6040517f3a8d6086000000000000000000000000000000000000000000000000000000008152600401610525939291906110d9565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561055357610552610b27565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161061d959493929190611188565b602060405180830381600087803b15801561063757600080fd5b505af115801561064b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066f91906111f0565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff16600181111561070557610704610b27565b5b6000600181111561071957610718610b27565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261074d919061124c565b1190506000806000805490501190506000804711905083801561076d5750825b80156107765750815b801561077f5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60008082815481106107da576107d9611280565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b600080805490508260008151811061083d5761083c611280565b5b602002602001015161084f91906112de565b9050600080828154811061086657610865611280565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156108fa576108f9610b27565b5b0217905550600067ffffffffffffffff81111561091a57610919610c0f565b5b6040519080825280602002602001820160405280156109485781602001602082028036833780820191505090505b506000908051906020019061095e929190610a4c565b5060008173ffffffffffffffffffffffffffffffffffffffff164760405161098590611340565b60006040518083038185875af1925050503d80600081146109c2576040519150601f19603f3d011682016040523d82523d6000602084013e6109c7565b606091505b5050905080610a02576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610ac5579160200282015b82811115610ac45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a6c565b5b509050610ad29190610ad6565b5090565b5b80821115610aef576000816000905550600101610ad7565b5090565b6000819050919050565b610b0681610af3565b82525050565b6000602082019050610b216000830184610afd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b6757610b66610b27565b5b50565b6000819050610b7882610b56565b919050565b6000610b8882610b6a565b9050919050565b610b9881610b7d565b82525050565b6000602082019050610bb36000830184610b8f565b92915050565b6000604051905090565b600080fd5b600080fd5b610bd681610af3565b8114610be157600080fd5b50565b600081359050610bf381610bcd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c4782610bfe565b810181811067ffffffffffffffff82111715610c6657610c65610c0f565b5b80604052505050565b6000610c79610bb9565b9050610c858282610c3e565b919050565b600067ffffffffffffffff821115610ca557610ca4610c0f565b5b602082029050602081019050919050565b600080fd5b6000610cce610cc984610c8a565b610c6f565b90508083825260208201905060208402830185811115610cf157610cf0610cb6565b5b835b81811015610d1a5780610d068882610be4565b845260208401935050602081019050610cf3565b5050509392505050565b600082601f830112610d3957610d38610bf9565b5b8135610d49848260208601610cbb565b91505092915050565b60008060408385031215610d6957610d68610bc3565b5b6000610d7785828601610be4565b925050602083013567ffffffffffffffff811115610d9857610d97610bc8565b5b610da485828601610d24565b9150509250929050565b600080fd5b60008083601f840112610dc957610dc8610bf9565b5b8235905067ffffffffffffffff811115610de657610de5610dae565b5b602083019150836001820283011115610e0257610e01610cb6565b5b9250929050565b60008060208385031215610e2057610e1f610bc3565b5b600083013567ffffffffffffffff811115610e3e57610e3d610bc8565b5b610e4a85828601610db3565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e8182610e56565b9050919050565b610e9181610e76565b82525050565b6000602082019050610eac6000830184610e88565b92915050565b600080fd5b600067ffffffffffffffff821115610ed257610ed1610c0f565b5b610edb82610bfe565b9050602081019050919050565b82818337600083830152505050565b6000610f0a610f0584610eb7565b610c6f565b905082815260208101848484011115610f2657610f25610eb2565b5b610f31848285610ee8565b509392505050565b600082601f830112610f4e57610f4d610bf9565b5b8135610f5e848260208601610ef7565b91505092915050565b600060208284031215610f7d57610f7c610bc3565b5b600082013567ffffffffffffffff811115610f9b57610f9a610bc8565b5b610fa784828501610f39565b91505092915050565b60008115159050919050565b610fc581610fb0565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611005578082015181840152602081019050610fea565b83811115611014576000848401525b50505050565b600061102582610fcb565b61102f8185610fd6565b935061103f818560208601610fe7565b61104881610bfe565b840191505092915050565b60006040820190506110686000830185610fbc565b818103602083015261107a818461101a565b90509392505050565b60006020828403121561109957611098610bc3565b5b60006110a784828501610be4565b91505092915050565b60006040820190506110c56000830185610e88565b6110d26020830184610e88565b9392505050565b60006060820190506110ee6000830186610afd565b6110fb6020830185610afd565b6111086040830184610afd565b949350505050565b6000819050919050565b61112381611110565b82525050565b600067ffffffffffffffff82169050919050565b61114681611129565b82525050565b600061ffff82169050919050565b6111638161114c565b82525050565b600063ffffffff82169050919050565b61118281611169565b82525050565b600060a08201905061119d600083018861111a565b6111aa602083018761113d565b6111b7604083018661115a565b6111c46060830185611179565b6111d16080830184611179565b9695505050505050565b6000815190506111ea81610bcd565b92915050565b60006020828403121561120657611205610bc3565b5b6000611214848285016111db565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061125782610af3565b915061126283610af3565b9250828210156112755761127461121d565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112e982610af3565b91506112f483610af3565b925082611304576113036112af565b5b828206905092915050565b600081905092915050565b50565b600061132a60008361130f565b91506113358261131a565b600082019050919050565b600061134b8261131d565b915081905091905056fea264697066735822122004ded44eb4d8ab93927f2d833be97104102eb3c9be26defef558236cb1c42d8464736f6c63430008080033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
