/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETHEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpKeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGasLane",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b50604051620018aa380380620018aa8339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516114bc620003ee600039600081816107df01526108880152600061069b0152600061067801526000818161065701526108b00152600061061b0152600081816102fa01526103f7015260008181610337015261038b01526114bc6000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f578063c19dd76b11610059578063c19dd76b14610238578063e55ae4e814610263578063f43b52cb146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780636e04ff0d146101cf57806391ad27b41461020d576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c22565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610cb4565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e68565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610f1f565b610564565b005b34801561018557600080fd5b5061018e610763565b60405161019b9190610fad565b60405180910390f35b3480156101b057600080fd5b506101b961078d565b6040516101c69190610c22565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f1919061107d565b61079c565b604051610204929190611169565b60405180910390f35b34801561021957600080fd5b50610222610884565b60405161022f9190610c22565b60405180910390f35b34801561024457600080fd5b5061024d6108ac565b60405161025a91906111b2565b60405180910390f35b34801561026f57600080fd5b5061028a600480360381019061028591906111cd565b6108d4565b6040516102979190610fad565b60405180910390f35b3480156102ac57600080fd5b506102b561091b565b6040516102c29190610c22565b60405180910390f35b3480156102d757600080fd5b506102e0610925565b6040516102ed9190610c22565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de9291906111fa565b60405180910390fd5b6103f18282610931565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610c3d565b5b600160149054906101000a900460ff16600181111561048557610484610c3d565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e6040518060200160405280600081525061079c565b509050806105ed5747600080549050600160149054906101000a900460ff1660018111156105af576105ae610c3d565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016105e493929190611223565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561061257610611610c3d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dc9594939291906112b9565b602060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e9190611321565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff1660018111156107c4576107c3610c3d565b5b600060018111156107d8576107d7610c3d565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261080c919061137d565b1190506000806000805490501190506000804711905083801561082c5750825b80156108355750815b801561083e5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108e9576108e86113b1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b600080805490508260008151811061094c5761094b6113b1565b5b602002602001015161095e919061140f565b90506000808281548110610975576109746113b1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a0957610a08610c3d565b5b021790555042600281905550600067ffffffffffffffff811115610a3057610a2f610d25565b5b604051908082528060200260200182016040528015610a5e5781602001602082028036833780820191505090505b5060009080519060200190610a74929190610b62565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9b90611471565b60006040518083038185875af1925050503d8060008114610ad8576040519150601f19603f3d011682016040523d82523d6000602084013e610add565b606091505b5050905080610b18576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bdb579160200282015b82811115610bda5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b82565b5b509050610be89190610bec565b5090565b5b80821115610c05576000816000905550600101610bed565b5090565b6000819050919050565b610c1c81610c09565b82525050565b6000602082019050610c376000830184610c13565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c7d57610c7c610c3d565b5b50565b6000819050610c8e82610c6c565b919050565b6000610c9e82610c80565b9050919050565b610cae81610c93565b82525050565b6000602082019050610cc96000830184610ca5565b92915050565b6000604051905090565b600080fd5b600080fd5b610cec81610c09565b8114610cf757600080fd5b50565b600081359050610d0981610ce3565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d5d82610d14565b810181811067ffffffffffffffff82111715610d7c57610d7b610d25565b5b80604052505050565b6000610d8f610ccf565b9050610d9b8282610d54565b919050565b600067ffffffffffffffff821115610dbb57610dba610d25565b5b602082029050602081019050919050565b600080fd5b6000610de4610ddf84610da0565b610d85565b90508083825260208201905060208402830185811115610e0757610e06610dcc565b5b835b81811015610e305780610e1c8882610cfa565b845260208401935050602081019050610e09565b5050509392505050565b600082601f830112610e4f57610e4e610d0f565b5b8135610e5f848260208601610dd1565b91505092915050565b60008060408385031215610e7f57610e7e610cd9565b5b6000610e8d85828601610cfa565b925050602083013567ffffffffffffffff811115610eae57610ead610cde565b5b610eba85828601610e3a565b9150509250929050565b600080fd5b60008083601f840112610edf57610ede610d0f565b5b8235905067ffffffffffffffff811115610efc57610efb610ec4565b5b602083019150836001820283011115610f1857610f17610dcc565b5b9250929050565b60008060208385031215610f3657610f35610cd9565b5b600083013567ffffffffffffffff811115610f5457610f53610cde565b5b610f6085828601610ec9565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9782610f6c565b9050919050565b610fa781610f8c565b82525050565b6000602082019050610fc26000830184610f9e565b92915050565b600080fd5b600067ffffffffffffffff821115610fe857610fe7610d25565b5b610ff182610d14565b9050602081019050919050565b82818337600083830152505050565b600061102061101b84610fcd565b610d85565b90508281526020810184848401111561103c5761103b610fc8565b5b611047848285610ffe565b509392505050565b600082601f83011261106457611063610d0f565b5b813561107484826020860161100d565b91505092915050565b60006020828403121561109357611092610cd9565b5b600082013567ffffffffffffffff8111156110b1576110b0610cde565b5b6110bd8482850161104f565b91505092915050565b60008115159050919050565b6110db816110c6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111b578082015181840152602081019050611100565b8381111561112a576000848401525b50505050565b600061113b826110e1565b61114581856110ec565b93506111558185602086016110fd565b61115e81610d14565b840191505092915050565b600060408201905061117e60008301856110d2565b81810360208301526111908184611130565b90509392505050565b6000819050919050565b6111ac81611199565b82525050565b60006020820190506111c760008301846111a3565b92915050565b6000602082840312156111e3576111e2610cd9565b5b60006111f184828501610cfa565b91505092915050565b600060408201905061120f6000830185610f9e565b61121c6020830184610f9e565b9392505050565b60006060820190506112386000830186610c13565b6112456020830185610c13565b6112526040830184610c13565b949350505050565b600067ffffffffffffffff82169050919050565b6112778161125a565b82525050565b600061ffff82169050919050565b6112948161127d565b82525050565b600063ffffffff82169050919050565b6112b38161129a565b82525050565b600060a0820190506112ce60008301886111a3565b6112db602083018761126e565b6112e8604083018661128b565b6112f560608301856112aa565b61130260808301846112aa565b9695505050505050565b60008151905061131b81610ce3565b92915050565b60006020828403121561133757611336610cd9565b5b60006113458482850161130c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061138882610c09565b915061139383610c09565b9250828210156113a6576113a561134e565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061141a82610c09565b915061142583610c09565b925082611435576114346113e0565b5b828206905092915050565b600081905092915050565b50565b600061145b600083611440565b91506114668261144b565b600082019050919050565b600061147c8261144e565b915081905091905056fea2646970667358221220bb5f7626cfac2a1fc1ae4c4bf5141c6455a548f49597692e371052d52e140bae64736f6c63430008080033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
