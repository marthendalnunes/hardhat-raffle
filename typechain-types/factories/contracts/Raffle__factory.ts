/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETHEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpKeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b50604051620016e9380380620016e98339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c61014051611309620003e060003960006106b4015260006105700152600061054d0152600061052c015260006104f0015260008181610212015261030f01526000818161024f01526102a301526113096000f3fe6080604052600436106100865760003560e01c80634585e33b116100595780634585e33b14610114578063473f1ddc1461013d57806353a2c19a146101685780636e04ff0d14610193578063e55ae4e8146101d157610086565b806309bc33a71461008b578063115cbaf5146100b65780631fe543e3146100e15780632cfcc5391461010a575b600080fd5b34801561009757600080fd5b506100a061020e565b6040516100ad9190610a8a565b60405180910390f35b3480156100c257600080fd5b506100cb610236565b6040516100d89190610b1c565b60405180910390f35b3480156100ed57600080fd5b5061010860048036038101906101039190610cd0565b61024d565b005b61011261030d565b005b34801561012057600080fd5b5061013b60048036038101906101369190610d87565b610439565b005b34801561014957600080fd5b50610152610638565b60405161015f9190610e15565b60405180910390f35b34801561017457600080fd5b5061017d610662565b60405161018a9190610a8a565b60405180910390f35b34801561019f57600080fd5b506101ba60048036038101906101b59190610ee5565b610671565b6040516101c8929190610fd1565b60405180910390f35b3480156101dd57600080fd5b506101f860048036038101906101f39190611001565b610759565b6040516102059190610e15565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ff57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102f692919061102e565b60405180910390fd5b61030982826107a0565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610367576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561037b5761037a610aa5565b5b600160149054906101000a900460ff16600181111561039d5761039c610aa5565b5b146103d4576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600061045360405180602001604052806000815250610671565b509050806104c25747600080549050600160149054906101000a900460ff16600181111561048457610483610aa5565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016104b993929190611057565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104e7576104e6610aa5565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105b1959493929190611106565b602060405180830381600087803b1580156105cb57600080fd5b505af11580156105df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610603919061116e565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff16600181111561069957610698610aa5565b5b600060018111156106ad576106ac610aa5565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106e191906111ca565b119050600080600080549050119050600080471190508380156107015750825b801561070a5750815b80156107135750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600080828154811061076e5761076d6111fe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106107bb576107ba6111fe565b5b60200260200101516107cd919061125c565b905060008082815481106107e4576107e36111fe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561087857610877610aa5565b5b0217905550600067ffffffffffffffff81111561089857610897610b8d565b5b6040519080825280602002602001820160405280156108c65781602001602082028036833780820191505090505b50600090805190602001906108dc9291906109ca565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610903906112be565b60006040518083038185875af1925050503d8060008114610940576040519150601f19603f3d011682016040523d82523d6000602084013e610945565b606091505b5050905080610980576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610a43579160200282015b82811115610a425782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ea565b5b509050610a509190610a54565b5090565b5b80821115610a6d576000816000905550600101610a55565b5090565b6000819050919050565b610a8481610a71565b82525050565b6000602082019050610a9f6000830184610a7b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ae557610ae4610aa5565b5b50565b6000819050610af682610ad4565b919050565b6000610b0682610ae8565b9050919050565b610b1681610afb565b82525050565b6000602082019050610b316000830184610b0d565b92915050565b6000604051905090565b600080fd5b600080fd5b610b5481610a71565b8114610b5f57600080fd5b50565b600081359050610b7181610b4b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bc582610b7c565b810181811067ffffffffffffffff82111715610be457610be3610b8d565b5b80604052505050565b6000610bf7610b37565b9050610c038282610bbc565b919050565b600067ffffffffffffffff821115610c2357610c22610b8d565b5b602082029050602081019050919050565b600080fd5b6000610c4c610c4784610c08565b610bed565b90508083825260208201905060208402830185811115610c6f57610c6e610c34565b5b835b81811015610c985780610c848882610b62565b845260208401935050602081019050610c71565b5050509392505050565b600082601f830112610cb757610cb6610b77565b5b8135610cc7848260208601610c39565b91505092915050565b60008060408385031215610ce757610ce6610b41565b5b6000610cf585828601610b62565b925050602083013567ffffffffffffffff811115610d1657610d15610b46565b5b610d2285828601610ca2565b9150509250929050565b600080fd5b60008083601f840112610d4757610d46610b77565b5b8235905067ffffffffffffffff811115610d6457610d63610d2c565b5b602083019150836001820283011115610d8057610d7f610c34565b5b9250929050565b60008060208385031215610d9e57610d9d610b41565b5b600083013567ffffffffffffffff811115610dbc57610dbb610b46565b5b610dc885828601610d31565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dff82610dd4565b9050919050565b610e0f81610df4565b82525050565b6000602082019050610e2a6000830184610e06565b92915050565b600080fd5b600067ffffffffffffffff821115610e5057610e4f610b8d565b5b610e5982610b7c565b9050602081019050919050565b82818337600083830152505050565b6000610e88610e8384610e35565b610bed565b905082815260208101848484011115610ea457610ea3610e30565b5b610eaf848285610e66565b509392505050565b600082601f830112610ecc57610ecb610b77565b5b8135610edc848260208601610e75565b91505092915050565b600060208284031215610efb57610efa610b41565b5b600082013567ffffffffffffffff811115610f1957610f18610b46565b5b610f2584828501610eb7565b91505092915050565b60008115159050919050565b610f4381610f2e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f83578082015181840152602081019050610f68565b83811115610f92576000848401525b50505050565b6000610fa382610f49565b610fad8185610f54565b9350610fbd818560208601610f65565b610fc681610b7c565b840191505092915050565b6000604082019050610fe66000830185610f3a565b8181036020830152610ff88184610f98565b90509392505050565b60006020828403121561101757611016610b41565b5b600061102584828501610b62565b91505092915050565b60006040820190506110436000830185610e06565b6110506020830184610e06565b9392505050565b600060608201905061106c6000830186610a7b565b6110796020830185610a7b565b6110866040830184610a7b565b949350505050565b6000819050919050565b6110a18161108e565b82525050565b600067ffffffffffffffff82169050919050565b6110c4816110a7565b82525050565b600061ffff82169050919050565b6110e1816110ca565b82525050565b600063ffffffff82169050919050565b611100816110e7565b82525050565b600060a08201905061111b6000830188611098565b61112860208301876110bb565b61113560408301866110d8565b61114260608301856110f7565b61114f60808301846110f7565b9695505050505050565b60008151905061116881610b4b565b92915050565b60006020828403121561118457611183610b41565b5b600061119284828501611159565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111d582610a71565b91506111e083610a71565b9250828210156111f3576111f261119b565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061126782610a71565b915061127283610a71565b9250826112825761128161122d565b5b828206905092915050565b600081905092915050565b50565b60006112a860008361128d565b91506112b382611298565b600082019050919050565b60006112c98261129b565b915081905091905056fea2646970667358221220cb6515250b4f8023a0f7e8606248059e17471c8b13faca61f34bf9ab72ac347d64736f6c63430008080033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    entranceFee: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
